<?php

namespace App\ActiveSchema;

use Illuminate\Database\Schema\Blueprint;

class Table extends Blueprint
{
    protected $builder;
    protected $lastColumn;
    protected $isNew = true;

    public function __construct($table, \Closure $callback = null, Schema $builder)
    {
        $this->builder = $builder;
        $pdo = $builder->getConnection()->getPdo();
        try {
            $pdo->query('SELECT 1 FROM ' . $table . ' LIMIT 1');
            $this->isNew = false;
        } catch (\Exception $e) {
            $this->isNew = true;
        }
        parent::__construct($table, $callback);
    }

    public function primaryString($name, $length = null)
    {
        $this->string($name, $length);
        $this->primary($name);
    }

    /**
     * @param string $column
     * @param null $length
     * @return $this
     */
    public function string($column, $length = null)
    {
        $this->lastColumn = $column;
        parent::string($column, $length);
        return $this;
    }

    public function primary($columns, $name = null, $algorithm = null)
    {
        if ($this->isNew)
            parent::primary($columns, $name, $algorithm);
    }

    public function indexThis()
    {
        $this->index($this->lastColumn);
    }

    public function index($columns, $name = null, $algorithm = null)
    {
        if (is_array($columns)) {
            if ($this->builder->hasIndex($this->table, $this->table . '_' . implode('_', $columns) . '_index'))
                return null;
        }
        if ($this->builder->hasIndex($this->table, $columns))
            return null;
        if ($name && $this->builder->hasIndex($this->table, $name)) {
            return null;
        }
        return parent::index($columns, $name, $algorithm); // TODO: Change the autogenerated stub
    }

    /**
     * Add column only if there isn't one.
     * So it will not throw if there already exists.
     */
    public function addColumn($type, $column, array $parameters = array())
    {
        // check against existing
        if (!$this->builder->hasColumn($this->table, $column))
            return parent::addColumn($type, $column, $parameters);
        // else probably compare and do some alteration
    }

    /**
     * Add a "deleted at" timestamp for the table.
     *
     * @param string $column
     * @param int $precision
     * @return \Illuminate\Support\Fluent
     */
    public function softDeletes($column = 'deleted_at', $precision = 0)
    {
        $timestamp = $this->timestamp($column, $precision);
        if (is_object($timestamp))
            $timestamp->nullable();
    }

    /**
     * Create a new timestamp column on the table.
     *
     * @param  string  $column
     * @param  int  $precision
     * @return \Illuminate\Database\Schema\ColumnDefinition
     */
    /*public function nullableTimestamp($column, $precision = 0)
    {
        $object = $this->addColumn('timestamp', $column, compact('precision'));

        if ($object)
            $object->nullable();
    }*/

    /**
     * Adds the `remember_token` column to the table.
     *
     * @return \Illuminate\Support\Fluent
     */
    public function rememberToken()
    {
        $object = $this->string('remember_token', 100);
        if (is_object($object))
            $object->nullable();
    }

    public function timestamps($precision = 0)
    {
        $this->nullableTimestamps($precision);
    }

    /**
     * Add nullable creation and update timestamps to the table.
     *
     * @return void
     */
    public function nullableTimestamps($precision = 0)
    {
        $timestamp = $this->timestamp('created_at', $precision);
        if (is_object($timestamp))
            $timestamp->nullable();
        $timestamp = $this->timestamp('updated_at');
        if (is_object($timestamp))
            $timestamp->nullable();
    }

    /**
     * Specify a unique index for the table.
     *
     * @param  string|array  $columns
     * @param  string|null  $name
     * @param  string|null  $algorithm
     * @return \Illuminate\Support\Fluent
     */
    public function unique($columns, $name = null, $algorithm = null)
    {
        // check against existing
        if (!$this->builder->hasColumn($this->table, $columns))
            return $this->indexCommand('unique', $columns, $name, $algorithm);
    }
}